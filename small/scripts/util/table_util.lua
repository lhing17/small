---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by G_Seinfeld.
--- DateTime: 2019/4/23 9:34
---

base = base or {}

--- 判断值是否存在于表中
--- @param value any
--- @param tab table
function base.is_include(value, tab)
    for _, v in ipairs(tab) do
        if v == value then
            return true
        end
    end
    return false
end

function base.getRandomValueInList(list)
    local rand = base.random_int(1, #list)
    return list[rand]
end



--- 获取哈希表中所有的键
--- @generic K, V 表的键和值
--- @param tab table<K, V>
--- @return table<number, K>
function table.keys(tab, comp)
    local keys = {}
    for k, _ in pairs(tab, comp or defaultComp) do
        table.insert(keys, k)
    end
    return keys
end

--- 获取哈希表中随机的键
--- @generic K, V 表的键和值
--- @param tab table<K, V>
--- @param comp function 比较器
--- @return K
function base.getRandomKey(tab, comp)
    local temp = table.keys(tab, comp)
    return base.getRandomValueInList(temp)
end

-- log输出格式化
local function logPrint(str)
    str = os.date("\nLog output date: %Y-%m-%d %H:%M:%S \n", os.time()) .. str
    print(str)
end

-- key值格式化
local function formatKey(key)
    local t = type(key)
    if t == "number" then
        return "[" .. key .. "]"
    elseif t == "string" then
        local n = tonumber(key)
        if n then
            return "[" .. key .. "]"
        end
    end
    return key
end

-- 栈
local function newStack()
    local stack = {
        tableList = {}
    }
    function stack:push(t)
        table.insert(self.tableList, t)
    end
    function stack:pop()
        return table.remove(self.tableList)
    end
    function stack:contains(t)
        for _, v in ipairs(self.tableList) do
            if v == t then
                return true
            end
        end
        return false
    end
    return stack
end

-- 输出打印table表 函数
function base.printTable(...)
    local args = { ... }
    for _, v in pairs(args) do
        local root = v
        if type(root) == "table" then
            local temp = {
                "------------------------ printTable start ------------------------\n",
                "local tableValue" .. " = {\n",
            }
            local stack = newStack()
            local function table2String(t, depth)
                stack:push(t)
                if type(depth) == "number" then
                    depth = depth + 1
                else
                    depth = 1
                end
                local indent = ""
                for _ = 1, depth do
                    indent = indent .. "    "
                end
                for _k, _v in pairs(t) do
                    local key = tostring(_k)
                    local typeV = type(_v)
                    if typeV == "table" then
                        if key ~= "__valuePrototype" then
                            if stack:contains(_v) then
                                table.insert(temp, indent .. formatKey(key) .. " = {检测到循环引用!},\n")
                            else
                                table.insert(temp, indent .. formatKey(key) .. " = {\n")
                                table2String(_v, depth)
                                table.insert(temp, indent .. "},\n")
                            end
                        end
                    elseif typeV == "string" then
                        table.insert(temp, string.format("%s%s = \"%s\",\n", indent, formatKey(key), tostring(_v)))
                    else
                        table.insert(temp, string.format("%s%s = %s,\n", indent, formatKey(key), tostring(_v)))
                    end
                end
                stack:pop()
            end
            table2String(root)
            table.insert(temp, "}\n------------------------- printTable end -------------------------")
            logPrint(table.concat(temp))
        else
            logPrint("----------------------- printString start ------------------------\n"
                    .. tostring(root) .. "\n------------------------ printString end -------------------------")
        end
    end
end