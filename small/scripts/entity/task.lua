---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lianghao.
--- DateTime: 2022/6/19 11:33
---

--- 任务系统
local jass = require 'jass.common'

local TASK_TYPE = {
    kill = '击杀类', -- 击杀类任务
    collect = '收集类', -- 收集类任务
    visit = '拜访类', -- 拜访类任务
    escort = '护送类', -- 护送类任务
    level_up = '升级类', -- 升级类任务
}

local FINISH_TYPE = {
    return_to_npc = '返回NPC',
    direct = '直接完成'
}

local TASK_STATUS = {
    init = 0, -- 初始状态
    accept = 1, -- 接受任务
    finish = 2, -- 完成任务
}

local task = {}

--- @type table<number, task>
task.all_tasks = {}
setmetatable(task, task)
et.task = task

--- @class task
local mt = {}

task.__index = mt

mt.id = 0
mt.task_item_id = '' -- 任务物品id
mt.task_npc = nil -- 任务NPC
mt.type = 'task'
mt.task_type = TASK_TYPE.kill

mt.kill_list = {} -- 击杀目标列表
mt.collect_list = {} -- 收集目标列表
mt.visit_list = {} -- 拜访目标列表
mt.escort_unit_type = nil -- 护送单位类型
mt.level_up_target = 20 -- 升级目标

--- 新建任务
--- @param task_type string 任务类型
--- @param task_item_id string 任务物品id
--- @param task_npc unit 任务NPC
--- @param finish_type string 完成类型
--- @param allow_times number 允许完成次数
--- @param params table 其他参数
--- @return task
function mt:new(task_type, task_item_id, task_npc, finish_type, allow_times, params)
    local o = {}
    setmetatable(o, self)

    o.id = #task.all_tasks + 1
    o.task_type = task_type
    o.finish_type = finish_type
    o.task_item_id = task_item_id
    o.task_npc = task_npc
    o.allow_times = allow_times

    if task_type == TASK_TYPE.kill then
        o.kill_list = params.kill_list
    elseif task_type == TASK_TYPE.collect then
        o.collect_list = params.collect_list
    elseif task_type == TASK_TYPE.visit then
        o.visit_list = params.visit_list
    elseif task_type == TASK_TYPE.escort then
        o.escort_unit_type = params.escort_unit_type
    elseif task_type == TASK_TYPE.level_up then
        o.level_up_target = params.level_up_target
    end

    table.insert(task.all_tasks, o)

    return o
end

function mt:kill_task_finish(killer, killed)
    local p = killer:get_owner()
    local player_task = p.task_list[self.id]
    local killed_id = killed:get_type_id()
    player_task[self.id][killed_id].kill = player_task[self.id][killed_id].kill + 1
    
end

function task.init()

    -- 为每个玩家初始化任务列表
    for i = 1, 16 do
        local p = et.player(i)
        p.task_list = {}
    end

    --- @param killer unit 击杀者
    --- @param killed unit 被击杀者
    et.game:event '单位-死亡'(function(_, killer, killed)
        for _, v in ipairs(task.all_tasks) do
            if v.task_type == TASK_TYPE.kill
                    and base.is_include(killed:get_type_id(), table.keys(v.kill_list)) then
                v:kill_task_finish(killer, killed)
            end
        end
    end)

    --- @param u unit 单位
    --- @param it item 捡起的物品
    et.game:event '单位-捡起物品'(function(_, u, it)
        -- 授受任务
        for _, v in ipairs(task.all_tasks) do
            if it:get_id() == v.task_item_id then
                local p = u:get_owner()
                p.task_list[v.id] = p.task_list[v.id] or {}
                local player_task = p.task_list[v.id]
                if player_task.status == TASK_STATUS.init then
                    player_task.times = player_task.times + 1
                    if player_task.times > v.allow_times then
                        player_task.status = TASK_STATUS.finish
                        p:send_message('你已经完成了这个任务，不能再接受了。')
                    else
                        player_task.status = TASK_STATUS.accept
                        p:send_message('你已经接受了任务，请尽快完成。')
                    end
                end
            end
        end
    end)


end

return task


